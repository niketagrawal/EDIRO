// Code generated by protoc-gen-go. DO NOT EDIT.
// source: frontend.proto

package frontend

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TableUpdate struct {
	Resource             string   `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	ID                   string   `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableUpdate) Reset()         { *m = TableUpdate{} }
func (m *TableUpdate) String() string { return proto.CompactTextString(m) }
func (*TableUpdate) ProtoMessage()    {}
func (*TableUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca3873955a29cfe, []int{0}
}

func (m *TableUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableUpdate.Unmarshal(m, b)
}
func (m *TableUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableUpdate.Marshal(b, m, deterministic)
}
func (m *TableUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableUpdate.Merge(m, src)
}
func (m *TableUpdate) XXX_Size() int {
	return xxx_messageInfo_TableUpdate.Size(m)
}
func (m *TableUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TableUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TableUpdate proto.InternalMessageInfo

func (m *TableUpdate) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *TableUpdate) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type TableUpdateACK struct {
	Ack                  string   `protobuf:"bytes,3,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TableUpdateACK) Reset()         { *m = TableUpdateACK{} }
func (m *TableUpdateACK) String() string { return proto.CompactTextString(m) }
func (*TableUpdateACK) ProtoMessage()    {}
func (*TableUpdateACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_eca3873955a29cfe, []int{1}
}

func (m *TableUpdateACK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TableUpdateACK.Unmarshal(m, b)
}
func (m *TableUpdateACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TableUpdateACK.Marshal(b, m, deterministic)
}
func (m *TableUpdateACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableUpdateACK.Merge(m, src)
}
func (m *TableUpdateACK) XXX_Size() int {
	return xxx_messageInfo_TableUpdateACK.Size(m)
}
func (m *TableUpdateACK) XXX_DiscardUnknown() {
	xxx_messageInfo_TableUpdateACK.DiscardUnknown(m)
}

var xxx_messageInfo_TableUpdateACK proto.InternalMessageInfo

func (m *TableUpdateACK) GetAck() string {
	if m != nil {
		return m.Ack
	}
	return ""
}

func init() {
	proto.RegisterType((*TableUpdate)(nil), "TableUpdate")
	proto.RegisterType((*TableUpdateACK)(nil), "TableUpdateACK")
}

func init() { proto.RegisterFile("frontend.proto", fileDescriptor_eca3873955a29cfe) }

var fileDescriptor_eca3873955a29cfe = []byte{
	// 143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2b, 0xca, 0xcf,
	0x2b, 0x49, 0xcd, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xb2, 0xe4, 0xe2, 0x0e, 0x49,
	0x4c, 0xca, 0x49, 0x0d, 0x2d, 0x48, 0x49, 0x2c, 0x49, 0x15, 0x92, 0xe2, 0xe2, 0x28, 0x4a, 0x2d,
	0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x85, 0xf8,
	0xb8, 0x98, 0x3c, 0x5d, 0x24, 0x98, 0xc0, 0xa2, 0x4c, 0x9e, 0x2e, 0x4a, 0x4a, 0x5c, 0x7c, 0x48,
	0x5a, 0x1d, 0x9d, 0xbd, 0x85, 0x04, 0xb8, 0x98, 0x13, 0x93, 0xb3, 0x25, 0x98, 0xc1, 0x4a, 0x40,
	0x4c, 0x23, 0x27, 0x2e, 0x0e, 0x37, 0xa8, 0x85, 0x42, 0x66, 0x5c, 0xc2, 0x41, 0x50, 0xb3, 0x90,
	0xad, 0xe4, 0xd1, 0x43, 0xe2, 0x49, 0xf1, 0xeb, 0xa1, 0x9a, 0xa9, 0xc4, 0x90, 0xc4, 0x06, 0x76,
	0xa9, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x44, 0x12, 0xdf, 0x4a, 0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FrontendClient is the client API for Frontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendClient interface {
	ResourceTableUpdate(ctx context.Context, in *TableUpdate, opts ...grpc.CallOption) (*TableUpdateACK, error)
}

type frontendClient struct {
	cc *grpc.ClientConn
}

func NewFrontendClient(cc *grpc.ClientConn) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) ResourceTableUpdate(ctx context.Context, in *TableUpdate, opts ...grpc.CallOption) (*TableUpdateACK, error) {
	out := new(TableUpdateACK)
	err := c.cc.Invoke(ctx, "/Frontend/ResourceTableUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendServer is the server API for Frontend service.
type FrontendServer interface {
	ResourceTableUpdate(context.Context, *TableUpdate) (*TableUpdateACK, error)
}

func RegisterFrontendServer(s *grpc.Server, srv FrontendServer) {
	s.RegisterService(&_Frontend_serviceDesc, srv)
}

func _Frontend_ResourceTableUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).ResourceTableUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Frontend/ResourceTableUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).ResourceTableUpdate(ctx, req.(*TableUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Frontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResourceTableUpdate",
			Handler:    _Frontend_ResourceTableUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
